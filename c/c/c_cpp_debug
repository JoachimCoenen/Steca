// (c)

#include "c_cpp_only.inc"

#ifdef C_CPP_DEBUG_INCLUDED
  #error inlude only once
#endif
#define C_CPP_DEBUG_INCLUDED

#ifndef NDEBUG

#include <iostream>

struct _DebugOut_ {
  _DebugOut_() {
    std::cout << "[";
  }

 ~_DebugOut_() {
    std::cout << "]" << std::endl;
  }

  template<typename T>
  _DebugOut_& operator<<(T const& t) {
    if (have)
      std::cout << " :";
    have = true;
    std::cout << t;
    return *this;
  }

private:
  bool have = false;
};

#define TR(what)  { _DebugOut_() << what; }

#define EXPECT_WT(cond, what) { if (!(cond)) WT(what); EXPECT(cond) }
#define ENSURE_WT(cond, what) { if (!(cond)) WT(what); ENSURE(cond) }
#define ABORT_IF(cond, msg)   { if (cond) { TR("abort:" << __FILE__ << __LINE__ << msg); abort();} }

#else

#define TR(what)  {}

#define EXPECT_WT(cond, what) { EXPECT(cond) }
#define ENSURE_WT(cond, what) { ENSURE(cond) }
#define ABORT_IF(cond, msg)   { if (cond) abort(); }

#endif

#define WT(what) TR(#what ">" << what)
#define NEVER    EXPECT(false)

// eof
